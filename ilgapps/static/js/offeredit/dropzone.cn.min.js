!function () {
    function a(b, c, d) {
        var e = a.resolve(b);
        if (null == e) {
            d = d || b, c = c || "root";
            var f = new Error('Failed to require "' + d + '" from "' + c + '"');
            throw f.path = d, f.parent = c, f.require = !0, f
        }
        var g = a.modules[e];
        return g.exports || (g.exports = {}, g.client = g.component = !0, g.call(this, g.exports, a.relative(e), g)), g.exports
    }

    a.modules = {}, a.aliases = {}, a.resolve = function (b) {
        "/" === b.charAt(0) && (b = b.slice(1));
        for (var c = [b, b + ".js", b + ".json", b + "/index.js", b + "/index.json"], d = 0; d < c.length; d++) {
            var b = c[d];
            if (a.modules.hasOwnProperty(b))return b;
            if (a.aliases.hasOwnProperty(b))return a.aliases[b]
        }
    }, a.normalize = function (a, b) {
        var c = [];
        if ("." != b.charAt(0))return b;
        a = a.split("/"), b = b.split("/");
        for (var d = 0; d < b.length; ++d)".." == b[d] ? a.pop() : "." != b[d] && "" != b[d] && c.push(b[d]);
        return a.concat(c).join("/")
    }, a.register = function (b, c) {
        a.modules[b] = c
    }, a.alias = function (b, c) {
        if (!a.modules.hasOwnProperty(b))throw new Error('Failed to alias "' + b + '", it does not exist');
        a.aliases[c] = b
    }, a.relative = function (b) {
        function d(a, b) {
            for (var c = a.length; c--;)if (a[c] === b)return c;
            return -1
        }

        function e(c) {
            var d = e.resolve(c);
            return a(d, b, c)
        }

        var c = a.normalize(b, "..");
        return e.resolve = function (e) {
            var f = e.charAt(0);
            if ("/" == f)return e.slice(1);
            if ("." == f)return a.normalize(c, e);
            var g = b.split("/"), h = d(g, "deps") + 1;
            return h || (h = 0), e = g.slice(0, h + 1).join("/") + "/deps/" + e
        }, e.exists = function (b) {
            return a.modules.hasOwnProperty(e.resolve(b))
        }, e
    }, a.register("component-emitter/index.js", function (a, b, c) {
        function d(a) {
            return a ? e(a) : void 0
        }

        function e(a) {
            for (var b in d.prototype)a[b] = d.prototype[b];
            return a
        }

        c.exports = d, d.prototype.on = function (a, b) {
            return this._callbacks = this._callbacks || {}, (this._callbacks[a] = this._callbacks[a] || []).push(b), this
        }, d.prototype.once = function (a, b) {
            function d() {
                c.off(a, d), b.apply(this, arguments)
            }

            var c = this;
            return this._callbacks = this._callbacks || {}, b._off = d, this.on(a, d), this
        }, d.prototype.off = d.prototype.removeListener = d.prototype.removeAllListeners = function (a, b) {
            this._callbacks = this._callbacks || {};
            var c = this._callbacks[a];
            if (!c)return this;
            if (1 == arguments.length)return delete this._callbacks[a], this;
            var d = c.indexOf(b._off || b);
            return ~d && c.splice(d, 1), this
        }, d.prototype.emit = function (a) {
            this._callbacks = this._callbacks || {};
            var b = [].slice.call(arguments, 1), c = this._callbacks[a];
            if (c) {
                c = c.slice(0);
                for (var d = 0, e = c.length; e > d; ++d)c[d].apply(this, b)
            }
            return this
        }, d.prototype.listeners = function (a) {
            return this._callbacks = this._callbacks || {}, this._callbacks[a] || []
        }, d.prototype.hasListeners = function (a) {
            return !!this.listeners(a).length
        }
    }), a.register("dropzone/index.js", function (a, b, c) {
        c.exports = b("./lib/dropzone.js")
    }), a.register("dropzone/lib/dropzone.js", function (a, b, c) {
        !function () {
            var a, d, e, f, g, h, i = {}.hasOwnProperty, j = function (a, b) {
                function d() {
                    this.constructor = a
                }

                for (var c in b)i.call(b, c) && (a[c] = b[c]);
                return d.prototype = b.prototype, a.prototype = new d, a.__super__ = b.prototype, a
            }, k = [].slice;
            d = "undefined" != typeof Emitter && null !== Emitter ? Emitter : b("emitter"), g = function () {
            }, a = function (a) {
                function c(a, d) {
                    var e, f, g;
                    if (this.element = a, this.version = c.version, this.defaultOptions.previewTemplate = this.defaultOptions.previewTemplate.replace(/\n*/g, ""), this.clickableElements = [], this.listeners = [], this.files = [], "string" == typeof this.element && (this.element = document.querySelector(this.element)), !this.element || null == this.element.nodeType)throw new Error("Invalid dropzone element.");
                    if (this.element.dropzone)throw new Error("Dropzone already attached.");
                    if (c.instances.push(this), a.dropzone = this, e = null != (g = c.optionsForElement(this.element)) ? g : {}, this.options = b({}, this.defaultOptions, e, null != d ? d : {}), this.options.forceFallback || !c.isBrowserSupported())return this.options.fallback.call(this);
                    if (null == this.options.url && (this.options.url = this.element.getAttribute("action")), !this.options.url)throw new Error("No URL provided.");
                    if (this.options.acceptedFiles && this.options.acceptedMimeTypes)throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
                    this.options.acceptedMimeTypes && (this.options.acceptedFiles = this.options.acceptedMimeTypes, delete this.options.acceptedMimeTypes), this.options.method = this.options.method.toUpperCase(), (f = this.getExistingFallback()) && f.parentNode && f.parentNode.removeChild(f), this.previewsContainer = this.options.previewsContainer ? c.getElement(this.options.previewsContainer, "previewsContainer") : this.element, this.options.clickable && (this.clickableElements = this.options.clickable === !0 ? [this.element] : c.getElements(this.options.clickable, "clickable")), this.init()
                }

                var b;
                return j(c, a), c.prototype.events = ["drop", "dragstart", "dragend", "dragenter", "dragover", "dragleave", "selectedfiles", "addedfile", "removedfile", "thumbnail", "error", "processing", "processingmultiple", "uploadprogress", "totaluploadprogress", "sending", "sendingmultiple", "success", "successmultiple", "canceled", "canceledmultiple", "complete", "completemultiple", "reset", "maxfilesexceeded"], c.prototype.defaultOptions = {
                    url: null,
                    method: "post",
                    withCredentials: !1,
                    parallelUploads: 2,
                    uploadMultiple: !1,
                    maxFilesize: 256,
                    paramName: "file",
                    createImageThumbnails: !0,
                    maxThumbnailFilesize: 10,
                    thumbnailWidth: 100,
                    thumbnailHeight: 100,
                    maxFiles: null,
                    params: {},
                    clickable: !0,
                    ignoreHiddenFiles: !0,
                    acceptedFiles: null,
                    acceptedMimeTypes: null,
                    autoProcessQueue: !0,
                    addRemoveLinks: !1,
                    previewsContainer: null,
                    dictDefaultMessage: "\u70b9\u51fb\u6216\u62d6\u62fd\u6587\u4ef6\u5230\u6b64\u533a\u57df\u8fdb\u884c\u4e0a\u4f20",
                    dictFallbackMessage: "\u4f60\u7684\u6d4f\u89c8\u5668\u4e0d\u652f\u6301\u62d6\u62fd\u6587\u4ef6\u4e0a\u4f20",
                    dictFallbackText: "\u8bf7\u4f7f\u7528fallback form\u7684\u5f62\u5f0f\u6765\u4e0a\u4f20\u6587\u4ef6",
                    dictFileTooBig: "\u6587\u4ef6\u8fc7\u5927 ({{filesize}}MB). \u6700\u5927\u652f\u6301: {{maxFilesize}}MB.",
                    dictInvalidFileType: "\u6587\u4ef6\u7c7b\u578b\u4e0d\u7b26",
                    dictResponseError: "\u670d\u52a1\u5668\u54cd\u5e94\uff1a{{statusCode}}",
                    dictCancelUpload: "\u53d6\u6d88\u4e0a\u4f20",
                    dictCancelUploadConfirmation: "\u786e\u8ba4\u53d6\u6d88\u4e0a\u4f20\uff1f",
                    dictRemoveFile: "\u5220\u9664\u6587\u4ef6",
                    dictRemoveFileConfirmation: null,
                    dictMaxFilesExceeded: "\u53ea\u80fd\u4e0a\u4f20{{maxFiles}}\u4e2a\u6587\u4ef6",
                    accept: function (a, b) {
                        return b()
                    },
                    init: function () {
                        return g
                    },
                    forceFallback: !1,
                    fallback: function () {
                        var a, b, d, e, f, g;
                        for (this.element.className = "" + this.element.className + " dz-browser-not-supported", g = this.element.getElementsByTagName("div"), e = 0, f = g.length; f > e; e++)a = g[e], /(^| )dz-message($| )/.test(a.className) && (b = a, a.className = "dz-message");
                        return b || (b = c.createElement('<div class="dz-message"><span></span></div>'), this.element.appendChild(b)), d = b.getElementsByTagName("span")[0], d && (d.textContent = this.options.dictFallbackMessage), this.element.appendChild(this.getFallbackForm())
                    },
                    resize: function (a) {
                        var b, c, d;
                        return b = {
                            srcX: 0,
                            srcY: 0,
                            srcWidth: a.width,
                            srcHeight: a.height
                        }, c = a.width / a.height, d = this.options.thumbnailWidth / this.options.thumbnailHeight, a.height < this.options.thumbnailHeight || a.width < this.options.thumbnailWidth ? (b.trgHeight = b.srcHeight, b.trgWidth = b.srcWidth) : c > d ? (b.srcHeight = a.height, b.srcWidth = b.srcHeight * d) : (b.srcWidth = a.width, b.srcHeight = b.srcWidth / d), b.srcX = (a.width - b.srcWidth) / 2, b.srcY = (a.height - b.srcHeight) / 2, b
                    },
                    drop: function () {
                        return this.element.classList.remove("dz-drag-hover")
                    },
                    dragstart: g,
                    dragend: function () {
                        return this.element.classList.remove("dz-drag-hover")
                    },
                    dragenter: function () {
                        return this.element.classList.add("dz-drag-hover")
                    },
                    dragover: function () {
                        return this.element.classList.add("dz-drag-hover")
                    },
                    dragleave: function () {
                        return this.element.classList.remove("dz-drag-hover")
                    },
                    selectedfiles: function () {
                        return this.element === this.previewsContainer ? this.element.classList.add("dz-started") : void 0
                    },
                    reset: function () {
                        return this.element.classList.remove("dz-started")
                    },
                    addedfile: function (a) {
                        var b = this;
                        return a.previewElement = c.createElement(this.options.previewTemplate), a.previewTemplate = a.previewElement, this.previewsContainer.appendChild(a.previewElement), a.previewElement.querySelector("[data-dz-name]").textContent = a.name, a.previewElement.querySelector("[data-dz-size]").innerHTML = this.filesize(a.size), this.options.addRemoveLinks && (a._removeLink = c.createElement('<a class="dz-remove" href="javascript:undefined;">' + this.options.dictRemoveFile + "</a>"), a._removeLink.addEventListener("click", function (d) {
                            return d.preventDefault(), d.stopPropagation(), a.status === c.UPLOADING ? c.confirm(b.options.dictCancelUploadConfirmation, function () {
                                return b.removeFile(a)
                            }) : b.options.dictRemoveFileConfirmation ? c.confirm(b.options.dictRemoveFileConfirmation, function () {
                                return b.removeFile(a)
                            }) : b.removeFile(a)
                        }), a.previewElement.appendChild(a._removeLink)), this._updateMaxFilesReachedClass()
                    },
                    removedfile: function (a) {
                        var b;
                        return null != (b = a.previewElement) && b.parentNode.removeChild(a.previewElement), this._updateMaxFilesReachedClass()
                    },
                    thumbnail: function (a, b) {
                        var c;
                        return a.previewElement.classList.remove("dz-file-preview"), a.previewElement.classList.add("dz-image-preview"), c = a.previewElement.querySelector("[data-dz-thumbnail]"), c.alt = a.name, c.src = b
                    },
                    error: function (a, b) {
                        return a.previewElement.classList.add("dz-error"), a.previewElement.querySelector("[data-dz-errormessage]").textContent = b
                    },
                    processing: function (a) {
                        return a.previewElement.classList.add("dz-processing"), a._removeLink ? a._removeLink.textContent = this.options.dictCancelUpload : void 0
                    },
                    processingmultiple: g,
                    uploadprogress: function (a, b) {
                        return a.previewElement.querySelector("[data-dz-uploadprogress]").style.width = "" + b + "%"
                    },
                    totaluploadprogress: g,
                    sending: g,
                    sendingmultiple: g,
                    success: function (a) {
                        return a.previewElement.classList.add("dz-success")
                    },
                    successmultiple: g,
                    canceled: function (a) {
                        return this.emit("error", a, "Upload canceled.")
                    },
                    canceledmultiple: g,
                    complete: function (a) {
                        return a._removeLink ? a._removeLink.textContent = this.options.dictRemoveFile : void 0
                    },
                    completemultiple: g,
                    maxfilesexceeded: g,
                    previewTemplate: '<div class="dz-preview dz-file-preview">\n  <div class="dz-details">\n    <div class="dz-filename"><span data-dz-name></span></div>\n    <div class="dz-size" data-dz-size></div>\n    <img data-dz-thumbnail />\n  </div>\n  <div class="dz-progress"><span class="dz-upload" data-dz-uploadprogress></span></div>\n  <div class="dz-success-mark"><span>\u2714</span></div>\n  <div class="dz-error-mark"><span>\u2718</span></div>\n  <div class="dz-error-message"><span data-dz-errormessage></span></div>\n</div>'
                }, b = function () {
                    var a, b, c, d, e, f, g;
                    for (d = arguments[0], c = 2 <= arguments.length ? k.call(arguments, 1) : [], f = 0, g = c.length; g > f; f++) {
                        b = c[f];
                        for (a in b)e = b[a], d[a] = e
                    }
                    return d
                }, c.prototype.getAcceptedFiles = function () {
                    var a, b, c, d, e;
                    for (d = this.files, e = [], b = 0, c = d.length; c > b; b++)a = d[b], a.accepted && e.push(a);
                    return e
                }, c.prototype.getRejectedFiles = function () {
                    var a, b, c, d, e;
                    for (d = this.files, e = [], b = 0, c = d.length; c > b; b++)a = d[b], a.accepted || e.push(a);
                    return e
                }, c.prototype.getQueuedFiles = function () {
                    var a, b, d, e, f;
                    for (e = this.files, f = [], b = 0, d = e.length; d > b; b++)a = e[b], a.status === c.QUEUED && f.push(a);
                    return f
                }, c.prototype.getUploadingFiles = function () {
                    var a, b, d, e, f;
                    for (e = this.files, f = [], b = 0, d = e.length; d > b; b++)a = e[b], a.status === c.UPLOADING && f.push(a);
                    return f
                }, c.prototype.init = function () {
                    var a, b, d, e, f, g, h, i = this;
                    for ("form" === this.element.tagName && this.element.setAttribute("enctype", "multipart/form-data"), this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message") && this.element.appendChild(c.createElement('<div class="dz-default dz-message"><span>' + this.options.dictDefaultMessage + "</span></div>")), this.clickableElements.length && (d = function () {
                        return i.hiddenFileInput && document.body.removeChild(i.hiddenFileInput), i.hiddenFileInput = document.createElement("input"), i.hiddenFileInput.setAttribute("type", "file"), i.hiddenFileInput.setAttribute("multiple", "multiple"), null != i.options.acceptedFiles && i.hiddenFileInput.setAttribute("accept", i.options.acceptedFiles), i.hiddenFileInput.style.visibility = "hidden", i.hiddenFileInput.style.position = "absolute", i.hiddenFileInput.style.top = "0", i.hiddenFileInput.style.left = "0", i.hiddenFileInput.style.height = "0", i.hiddenFileInput.style.width = "0", document.body.appendChild(i.hiddenFileInput), i.hiddenFileInput.addEventListener("change", function () {
                            var a;
                            return a = i.hiddenFileInput.files, a.length && (i.emit("selectedfiles", a), i.handleFiles(a)), d()
                        })
                    }, d()), this.URL = null != (g = window.URL) ? g : window.webkitURL, h = this.events, e = 0, f = h.length; f > e; e++)a = h[e], this.on(a, this.options[a]);
                    return this.on("uploadprogress", function () {
                        return i.updateTotalUploadProgress()
                    }), this.on("removedfile", function () {
                        return i.updateTotalUploadProgress()
                    }), this.on("canceled", function (a) {
                        return i.emit("complete", a)
                    }), b = function (a) {
                        return a.stopPropagation(), a.preventDefault ? a.preventDefault() : a.returnValue = !1
                    }, this.listeners = [{
                        element: this.element, events: {
                            dragstart: function (a) {
                                return i.emit("dragstart", a)
                            }, dragenter: function (a) {
                                return b(a), i.emit("dragenter", a)
                            }, dragover: function (a) {
                                return b(a), i.emit("dragover", a)
                            }, dragleave: function (a) {
                                return i.emit("dragleave", a)
                            }, drop: function (a) {
                                return b(a), i.drop(a), i.emit("drop", a)
                            }, dragend: function (a) {
                                return i.emit("dragend", a)
                            }
                        }
                    }], this.clickableElements.forEach(function (a) {
                        return i.listeners.push({
                            element: a, events: {
                                click: function (b) {
                                    return a !== i.element || b.target === i.element || c.elementInside(b.target, i.element.querySelector(".dz-message")) ? i.hiddenFileInput.click() : void 0
                                }
                            }
                        })
                    }), this.enable(), this.options.init.call(this)
                }, c.prototype.destroy = function () {
                    var a;
                    return this.disable(), this.removeAllFiles(!0), (null != (a = this.hiddenFileInput) ? a.parentNode : void 0) && (this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput), this.hiddenFileInput = null), delete this.element.dropzone
                }, c.prototype.updateTotalUploadProgress = function () {
                    var a, b, c, d, e, f, g, h;
                    if (d = 0, c = 0, a = this.getAcceptedFiles(), a.length) {
                        for (h = this.getAcceptedFiles(), f = 0, g = h.length; g > f; f++)b = h[f], d += b.upload.bytesSent, c += b.upload.total;
                        e = 100 * d / c
                    } else e = 100;
                    return this.emit("totaluploadprogress", e, c, d)
                }, c.prototype.getFallbackForm = function () {
                    var a, b, d, e;
                    return (a = this.getExistingFallback()) ? a : (d = '<div class="dz-fallback">', this.options.dictFallbackText && (d += "<p>" + this.options.dictFallbackText + "</p>"), d += '<input type="file" name="' + this.options.paramName + (this.options.uploadMultiple ? "[]" : "") + '" ' + (this.options.uploadMultiple ? 'multiple="multiple"' : void 0) + ' /><button type="submit">Upload!</button></div>', b = c.createElement(d), "FORM" !== this.element.tagName ? (e = c.createElement('<form action="' + this.options.url + '" enctype="multipart/form-data" method="' + this.options.method + '"></form>'), e.appendChild(b)) : (this.element.setAttribute("enctype", "multipart/form-data"), this.element.setAttribute("method", this.options.method)), null != e ? e : b)
                }, c.prototype.getExistingFallback = function () {
                    var a, b, c, d, e, f;
                    for (b = function (a) {
                        var b, c, d;
                        for (c = 0, d = a.length; d > c; c++)if (b = a[c], /(^| )fallback($| )/.test(b.className))return b
                    }, f = ["div", "form"], d = 0, e = f.length; e > d; d++)if (c = f[d], a = b(this.element.getElementsByTagName(c)))return a
                }, c.prototype.setupEventListeners = function () {
                    var a, b, c, d, e, f, g;
                    for (f = this.listeners, g = [], d = 0, e = f.length; e > d; d++)a = f[d], g.push(function () {
                        var d, e;
                        d = a.events, e = [];
                        for (b in d)c = d[b], e.push(a.element.addEventListener(b, c, !1));
                        return e
                    }());
                    return g
                }, c.prototype.removeEventListeners = function () {
                    var a, b, c, d, e, f, g;
                    for (f = this.listeners, g = [], d = 0, e = f.length; e > d; d++)a = f[d], g.push(function () {
                        var d, e;
                        d = a.events, e = [];
                        for (b in d)c = d[b], e.push(a.element.removeEventListener(b, c, !1));
                        return e
                    }());
                    return g
                }, c.prototype.disable = function () {
                    var a, b, c, d, e;
                    for (this.clickableElements.forEach(function (a) {
                        return a.classList.remove("dz-clickable")
                    }), this.removeEventListeners(), d = this.files, e = [], b = 0, c = d.length; c > b; b++)a = d[b], e.push(this.cancelUpload(a));
                    return e
                }, c.prototype.enable = function () {
                    return this.clickableElements.forEach(function (a) {
                        return a.classList.add("dz-clickable")
                    }), this.setupEventListeners()
                }, c.prototype.filesize = function (a) {
                    var b;
                    return a >= 1e11 ? (a /= 1e11, b = "TB") : a >= 1e8 ? (a /= 1e8, b = "GB") : a >= 1e5 ? (a /= 1e5, b = "MB") : a >= 100 ? (a /= 100, b = "KB") : (a = 10 * a, b = "b"), "<strong>" + Math.round(a) / 10 + "</strong> " + b
                }, c.prototype._updateMaxFilesReachedClass = function () {
                    return this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? this.element.classList.add("dz-max-files-reached") : this.element.classList.remove("dz-max-files-reached")
                }, c.prototype.drop = function (a) {
                    var b, c;
                    a.dataTransfer && (b = a.dataTransfer.files, this.emit("selectedfiles", b), b.length && (c = a.dataTransfer.items, c && c.length && (null != c[0].webkitGetAsEntry || null != c[0].getAsEntry) ? this.handleItems(c) : this.handleFiles(b)))
                }, c.prototype.handleFiles = function (a) {
                    var b, c, d, e;
                    for (e = [], c = 0, d = a.length; d > c; c++)b = a[c], e.push(this.addFile(b));
                    return e
                }, c.prototype.handleItems = function (a) {
                    var b, c, d, e;
                    for (d = 0, e = a.length; e > d; d++)c = a[d], null != c.webkitGetAsEntry ? (b = c.webkitGetAsEntry(), b.isFile ? this.addFile(c.getAsFile()) : b.isDirectory && this.addDirectory(b, b.name)) : this.addFile(c.getAsFile())
                }, c.prototype.accept = function (a, b) {
                    return a.size > 1024 * 1024 * this.options.maxFilesize ? b(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(a.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize)) : c.isValidFile(a, this.options.acceptedFiles) ? this.options.maxFiles && this.getAcceptedFiles().length >= this.options.maxFiles ? (b(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles)), this.emit("maxfilesexceeded", a)) : this.options.accept.call(this, a, b) : b(this.options.dictInvalidFileType)
                }, c.prototype.addFile = function (a) {
                    var b = this;
                    return a.upload = {
                        progress: 0,
                        total: a.size,
                        bytesSent: 0
                    }, this.files.push(a), a.status = c.ADDED, this.emit("addedfile", a), this.options.createImageThumbnails && a.type.match(/image.*/) && a.size <= 1024 * 1024 * this.options.maxThumbnailFilesize && this.createThumbnail(a), this.accept(a, function (c) {
                        return c ? (a.accepted = !1, b._errorProcessing([a], c)) : b.enqueueFile(a)
                    })
                }, c.prototype.enqueueFiles = function (a) {
                    var b, c, d;
                    for (c = 0, d = a.length; d > c; c++)b = a[c], this.enqueueFile(b);
                    return null
                }, c.prototype.enqueueFile = function (a) {
                    var b = this;
                    if (a.accepted = !0, a.status !== c.ADDED)throw new Error("This file can't be queued because it has already been processed or was rejected.");
                    return a.status = c.QUEUED, this.options.autoProcessQueue ? setTimeout(function () {
                        return b.processQueue()
                    }, 1) : void 0
                }, c.prototype.addDirectory = function (a, b) {
                    var c, d, e = this;
                    return c = a.createReader(), d = function (c) {
                        var d, f;
                        for (d = 0, f = c.length; f > d; d++)a = c[d], a.isFile ? a.file(function (a) {
                            return e.options.ignoreHiddenFiles && "." === a.name.substring(0, 1) ? void 0 : (a.fullPath = "" + b + "/" + a.name, e.addFile(a))
                        }) : a.isDirectory && e.addDirectory(a, "" + b + "/" + a.name)
                    }, c.readEntries(d, function (a) {
                        return "undefined" != typeof console && null !== console ? "function" == typeof console.log ? console.log(a) : void 0 : void 0
                    })
                }, c.prototype.removeFile = function (a) {
                    return a.status === c.UPLOADING && this.cancelUpload(a), this.files = h(this.files, a), this.emit("removedfile", a), 0 === this.files.length ? this.emit("reset") : void 0
                }, c.prototype.removeAllFiles = function (a) {
                    var b, d, e, f;
                    for (null == a && (a = !1), f = this.files.slice(), d = 0, e = f.length; e > d; d++)b = f[d], (b.status !== c.UPLOADING || a) && this.removeFile(b);
                    return null
                }, c.prototype.createThumbnail = function (a) {
                    var b, c = this;
                    return b = new FileReader, b.onload = function () {
                        var d;
                        return d = new Image, d.onload = function () {
                            var b, e, f, g, h, i, j, k;
                            return a.width = d.width, a.height = d.height, f = c.options.resize.call(c, a), null == f.trgWidth && (f.trgWidth = c.options.thumbnailWidth), null == f.trgHeight && (f.trgHeight = c.options.thumbnailHeight), b = document.createElement("canvas"), e = b.getContext("2d"), b.width = f.trgWidth, b.height = f.trgHeight, e.drawImage(d, null != (h = f.srcX) ? h : 0, null != (i = f.srcY) ? i : 0, f.srcWidth, f.srcHeight, null != (j = f.trgX) ? j : 0, null != (k = f.trgY) ? k : 0, f.trgWidth, f.trgHeight), g = b.toDataURL("image/png"), c.emit("thumbnail", a, g)
                        }, d.src = b.result
                    }, b.readAsDataURL(a)
                }, c.prototype.processQueue = function () {
                    var a, b, c, d;
                    if (b = this.options.parallelUploads, c = this.getUploadingFiles().length, a = c, !(c >= b) && (d = this.getQueuedFiles(), d.length > 0)) {
                        if (this.options.uploadMultiple)return this.processFiles(d.slice(0, b - c));
                        for (; b > a;) {
                            if (!d.length)return;
                            this.processFile(d.shift()), a++
                        }
                    }
                }, c.prototype.processFile = function (a) {
                    return this.processFiles([a])
                }, c.prototype.processFiles = function (a) {
                    var b, d, e;
                    for (d = 0, e = a.length; e > d; d++)b = a[d], b.processing = !0, b.status = c.UPLOADING, this.emit("processing", b);
                    return this.options.uploadMultiple && this.emit("processingmultiple", a), this.uploadFiles(a)
                }, c.prototype._getFilesWithXhr = function (a) {
                    var b, c;
                    return c = function () {
                        var c, d, e, f;
                        for (e = this.files, f = [], c = 0, d = e.length; d > c; c++)b = e[c], b.xhr === a && f.push(b);
                        return f
                    }.call(this)
                }, c.prototype.cancelUpload = function (a) {
                    var b, d, e, f, g, h, i;
                    if (a.status === c.UPLOADING) {
                        for (d = this._getFilesWithXhr(a.xhr), e = 0, g = d.length; g > e; e++)b = d[e], b.status = c.CANCELED;
                        for (a.xhr.abort(), f = 0, h = d.length; h > f; f++)b = d[f], this.emit("canceled", b);
                        this.options.uploadMultiple && this.emit("canceledmultiple", d)
                    } else((i = a.status) === c.ADDED || i === c.QUEUED) && (a.status = c.CANCELED, this.emit("canceled", a), this.options.uploadMultiple && this.emit("canceledmultiple", [a]));
                    return this.options.autoProcessQueue ? this.processQueue() : void 0
                }, c.prototype.uploadFile = function (a) {
                    return this.uploadFiles([a])
                }, c.prototype.uploadFiles = function (a) {
                    var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E = this;
                    for (r = new XMLHttpRequest, s = 0, w = a.length; w > s; s++)d = a[s], d.xhr = r;
                    r.open(this.options.method, this.options.url, !0), r.withCredentials = !!this.options.withCredentials, o = null, f = function () {
                        var b, c, e;
                        for (e = [], b = 0, c = a.length; c > b; b++)d = a[b], e.push(E._errorProcessing(a, o || E.options.dictResponseError.replace("{{statusCode}}", r.status), r));
                        return e
                    }, p = function (b) {
                        var c, e, f, g, h, i, j, k, l;
                        if (null != b)for (e = 100 * b.loaded / b.total, f = 0, i = a.length; i > f; f++)d = a[f], d.upload = {
                            progress: e,
                            total: b.total,
                            bytesSent: b.loaded
                        }; else {
                            for (c = !0, e = 100, g = 0, j = a.length; j > g; g++)d = a[g], (100 !== d.upload.progress || d.upload.bytesSent !== d.upload.total) && (c = !1), d.upload.progress = e, d.upload.bytesSent = d.upload.total;
                            if (c)return
                        }
                        for (l = [], h = 0, k = a.length; k > h; h++)d = a[h], l.push(E.emit("uploadprogress", d, e, d.upload.bytesSent));
                        return l
                    }, r.onload = function (b) {
                        var d;
                        if (a[0].status !== c.CANCELED && 4 === r.readyState) {
                            if (o = r.responseText, r.getResponseHeader("content-type") && ~r.getResponseHeader("content-type").indexOf("application/json"))try {
                                o = JSON.parse(o)
                            } catch (e) {
                                b = e, o = "Invalid JSON response from server."
                            }
                            return p(), 200 <= (d = r.status) && 300 > d ? E._finished(a, o, b) : f()
                        }
                    }, r.onerror = function () {
                        return a[0].status !== c.CANCELED ? f() : void 0
                    }, n = null != (A = r.upload) ? A : r, n.onprogress = p, i = {
                        Accept: "application/json",
                        "Cache-Control": "no-cache",
                        "X-Requested-With": "XMLHttpRequest"
                    }, this.options.headers && b(i, this.options.headers);
                    for (g in i)h = i[g], r.setRequestHeader(g, h);
                    if (e = new FormData, this.options.params) {
                        B = this.options.params;
                        for (m in B)q = B[m], e.append(m, q)
                    }
                    for (t = 0, x = a.length; x > t; t++)d = a[t], this.emit("sending", d, r, e);
                    if (this.options.uploadMultiple && this.emit("sendingmultiple", a, r, e), "FORM" === this.element.tagName)for (C = this.element.querySelectorAll("input, textarea, select, button"), u = 0, y = C.length; y > u; u++)j = C[u], k = j.getAttribute("name"), l = j.getAttribute("type"), (!l || "checkbox" !== (D = l.toLowerCase()) && "radio" !== D || j.checked) && e.append(k, j.value);
                    for (v = 0, z = a.length; z > v; v++)d = a[v], e.append("" + this.options.paramName + (this.options.uploadMultiple ? "[]" : ""), d, d.name);
                    return r.send(e)
                }, c.prototype._finished = function (a, b, d) {
                    var e, f, g;
                    for (f = 0, g = a.length; g > f; f++)e = a[f], e.status = c.SUCCESS, this.emit("success", e, b, d), this.emit("complete", e);
                    return this.options.uploadMultiple && (this.emit("successmultiple", a, b, d), this.emit("completemultiple", a)), this.options.autoProcessQueue ? this.processQueue() : void 0
                }, c.prototype._errorProcessing = function (a, b, d) {
                    var e, f, g;
                    for (f = 0, g = a.length; g > f; f++)e = a[f], e.status = c.ERROR, this.emit("error", e, b, d), this.emit("complete", e);
                    return this.options.uploadMultiple && (this.emit("errormultiple", a, b, d), this.emit("completemultiple", a)), this.options.autoProcessQueue ? this.processQueue() : void 0
                }, c
            }(d), a.version = "3.7.0", a.options = {}, a.optionsForElement = function (b) {
                return b.id ? a.options[e(b.id)] : void 0
            }, a.instances = [], a.forElement = function (a) {
                if ("string" == typeof a && (a = document.querySelector(a)), null == (null != a ? a.dropzone : void 0))throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
                return a.dropzone
            }, a.autoDiscover = !0, a.discover = function () {
                var b, c, d, e, f, g;
                for (document.querySelectorAll ? d = document.querySelectorAll(".dropzone") : (d = [], b = function (a) {
                    var b, c, e, f;
                    for (f = [], c = 0, e = a.length; e > c; c++)b = a[c], /(^| )dropzone($| )/.test(b.className) ? f.push(d.push(b)) : f.push(void 0);
                    return f
                }, b(document.getElementsByTagName("div")), b(document.getElementsByTagName("form"))), g = [], e = 0, f = d.length; f > e; e++)c = d[e], a.optionsForElement(c) !== !1 ? g.push(new a(c)) : g.push(void 0);
                return g
            }, a.blacklistedBrowsers = [/opera.*Macintosh.*version\/12/i], a.isBrowserSupported = function () {
                var b, c, d, e, f;
                if (b = !0, window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector)if ("classList"in document.createElement("a"))for (f = a.blacklistedBrowsers, d = 0, e = f.length; e > d; d++)c = f[d], c.test(navigator.userAgent) && (b = !1); else b = !1; else b = !1;
                return b
            }, h = function (a, b) {
                var c, d, e, f;
                for (f = [], d = 0, e = a.length; e > d; d++)c = a[d], c !== b && f.push(c);
                return f
            }, e = function (a) {
                return a.replace(/[\-_](\w)/g, function (a) {
                    return a[1].toUpperCase()
                })
            }, a.createElement = function (a) {
                var b;
                return b = document.createElement("div"), b.innerHTML = a, b.childNodes[0]
            }, a.elementInside = function (a, b) {
                if (a === b)return !0;
                for (; a = a.parentNode;)if (a === b)return !0;
                return !1
            }, a.getElement = function (a, b) {
                var c;
                if ("string" == typeof a ? c = document.querySelector(a) : null != a.nodeType && (c = a), null == c)throw new Error("Invalid `" + b + "` option provided. Please provide a CSS selector or a plain HTML element.");
                return c
            }, a.getElements = function (a, b) {
                var c, d, e, f, g, h, i, j;
                if (a instanceof Array) {
                    e = [];
                    try {
                        for (f = 0, h = a.length; h > f; f++)d = a[f], e.push(this.getElement(d, b))
                    } catch (k) {
                        c = k, e = null
                    }
                } else if ("string" == typeof a)for (e = [], j = document.querySelectorAll(a), g = 0, i = j.length; i > g; g++)d = j[g], e.push(d); else null != a.nodeType && (e = [a]);
                if (null == e || !e.length)throw new Error("Invalid `" + b + "` option provided. Please provide a CSS selector, a plain HTML element or a list of those.");
                return e
            }, a.confirm = function (a, b, c) {
                return window.confirm(a) ? b() : null != c ? c() : void 0
            }, a.isValidFile = function (a, b) {
                var c, d, e, f, g;
                if (!b)return !0;
                for (b = b.split(","), d = a.type, c = d.replace(/\/.*$/, ""), f = 0, g = b.length; g > f; f++)if (e = b[f], e = e.trim(), "." === e.charAt(0)) {
                    if (-1 !== a.name.indexOf(e, a.name.length - e.length))return !0
                } else if (/\/\*$/.test(e)) {
                    if (c === e.replace(/\/.*$/, ""))return !0
                } else if (d === e)return !0;
                return !1
            }, "undefined" != typeof jQuery && null !== jQuery && (jQuery.fn.dropzone = function (b) {
                return this.each(function () {
                    return new a(this, b)
                })
            }), "undefined" != typeof c && null !== c ? c.exports = a : window.Dropzone = a, a.ADDED = "added", a.QUEUED = "queued", a.ACCEPTED = a.QUEUED, a.UPLOADING = "uploading", a.PROCESSING = a.UPLOADING, a.CANCELED = "canceled", a.ERROR = "error", a.SUCCESS = "success", f = function (a, b) {
                var c, d, e, f, g, h, i, j, k;
                if (e = !1, k = !0, d = a.document, j = d.documentElement, c = d.addEventListener ? "addEventListener" : "attachEvent", i = d.addEventListener ? "removeEventListener" : "detachEvent", h = d.addEventListener ? "" : "on", f = function (c) {
                        return "readystatechange" !== c.type || "complete" === d.readyState ? (("load" === c.type ? a : d)[i](h + c.type, f, !1), !e && (e = !0) ? b.call(a, c.type || c) : void 0) : void 0
                    }, g = function () {
                        var a;
                        try {
                            j.doScroll("left")
                        } catch (b) {
                            return a = b, setTimeout(g, 50), void 0
                        }
                        return f("poll")
                    }, "complete" !== d.readyState) {
                    if (d.createEventObject && j.doScroll) {
                        try {
                            k = !a.frameElement
                        } catch (l) {
                        }
                        k && g()
                    }
                    return d[c](h + "DOMContentLoaded", f, !1), d[c](h + "readystatechange", f, !1), a[c](h + "load", f, !1)
                }
            }, a._autoDiscoverFunction = function () {
                return a.autoDiscover ? a.discover() : void 0
            }, f(window, a._autoDiscoverFunction)
        }.call(this)
    }), a.alias("component-emitter/index.js", "dropzone/deps/emitter/index.js"), a.alias("component-emitter/index.js", "emitter/index.js"), "object" == typeof exports ? module.exports = a("dropzone") : "function" == typeof define && define.amd ? define(function () {
        return a("dropzone")
    }) : this.Dropzone = a("dropzone")
}();